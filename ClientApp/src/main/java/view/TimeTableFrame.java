/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import client.ClientMain;
import common.Message;
import common.RequestType;
import common.RoomStatus;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import controller.TimeTableController;
import common.User;
import java.awt.Color;
import java.awt.Component;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.format.TextStyle;
import java.time.temporal.TemporalAdjusters;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Locale;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author rbcks
 */
public class TimeTableFrame extends javax.swing.JFrame {

    private final User user;

    public TimeTableFrame(User user) {
        this.user = user;
        initComponents();
        setLocationRelativeTo(null);
    }

    private void updateTimeTable(Map<String, List<String>> schedule) {
        String[] days = {"월", "화", "수", "목", "금"};
        String[] times = {
            "09:00~09:50", "10:00~10:50", "11:00~11:50", "12:00~12:50",
            "13:00~13:50", "14:00~14:50", "15:00~15:50", "16:00~16:50"
        };

        // 테이블 모델 가져오기
        DefaultTableModel model = (DefaultTableModel) timeTable.getModel();

        // 기존 테이블 초기화
        model.setRowCount(0);

        // 시간별 행을 생성
        for (int i = 0; i < times.length; i++) {
            Object[] row = new Object[days.length + 1];
            row[0] = times[i];

            for (int j = 0; j < days.length; j++) {
                String day = days[j];
                List<String> entries = schedule.get(day);
                row[j + 1] = (entries != null) ? entries.get(i) : "";
            }

            model.addRow(row);
        }
    }
    // TimeTableFrame 클래스 안에 추가

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        monthComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        weekComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        lectureRoomComboBox = new javax.swing.JComboBox<>();
        searchBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        timeTable = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        jLabel1.setText("시간표 조회");

        jLabel2.setFont(new java.awt.Font("맑은 고딕", 1, 12)); // NOI18N
        jLabel2.setText("월");

        monthComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월" }));

        jLabel3.setFont(new java.awt.Font("맑은 고딕", 1, 12)); // NOI18N
        jLabel3.setText("주차");

        weekComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1주차", "2주차", "3주차", "4주차", "5주차" }));

        jLabel4.setFont(new java.awt.Font("맑은 고딕", 1, 12)); // NOI18N
        jLabel4.setText("강의실");

        lectureRoomComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "908호", "911호", "912호", "913호", "914호", "915호", "916호", "918호" }));

        searchBtn.setText("조회");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        timeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"09:00~09:50", null, null, null, null, null},
                {"10:00~10:50", null, null, null, null, null},
                {"11:00~11:50", null, null, null, null, null},
                {"12:00~12:50", null, null, null, null, null},
                {"13:00~13:50", null, null, null, null, null},
                {"14:00~14:50", null, null, null, null, null},
                {"15:00~15:50", null, null, null, null, null},
                {"16:00~16:50", null, null, null, null, null}
            },
            new String [] {
                "시간/요일", "월", "화", "수", "목", "금"
            }
        ));
        jScrollPane1.setViewportView(timeTable);

        backBtn.setText("뒤로");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(monthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(weekComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(backBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lectureRoomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(searchBtn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(monthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(weekComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(lectureRoomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        this.dispose();
        ReservationMainFrame RMF = new ReservationMainFrame(user);
        RMF.setVisible(true);
    }//GEN-LAST:event_backBtnActionPerformed

    /**
     * 서버에 날짜+강의실을 보내면 예약 현황(RoomStatus)을 리턴합니다.
     */
    private List<RoomStatus> fetchScheduleFromServer(String date, String roomNumber) {
        try {
            Message req = new Message();
            req.setDomain("timetable");
            req.setType(RequestType.LOAD_TIMETABLE);
            Map<String, String> payload = new HashMap<>();
            payload.put("date", date);
            payload.put("room", roomNumber);
            req.setPayload(payload);

            ClientMain.out.writeObject(req);
            ClientMain.out.flush();
            Message res = (Message) ClientMain.in.readObject();

            if (res.getError() != null) {
                JOptionPane.showMessageDialog(this, "예약 현황 불러오기 실패: " + res.getError());
                return Collections.emptyList();
            }
            return (List<RoomStatus>) res.getPayload();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "통신 오류: " + e.getMessage());
            return Collections.emptyList();
        }
    }

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // 1) 콤보박스에서 월‧주차‧강의실 가져오기
        int month = Integer.parseInt(((String) monthComboBox.getSelectedItem()).replaceAll("[^0-9]", ""));
        int week = Integer.parseInt(((String) weekComboBox.getSelectedItem()).replaceAll("[^0-9]", ""));
        String room = ((String) lectureRoomComboBox.getSelectedItem()).replace("호", "");

        // 2) 주차별 시간표 (기존)
        TimeTableController tc = new TimeTableController();
        Map<String, List<String>> weekly = tc.getWeeklySchedule(month, week, room);

        // 3) 강의실 고정 스케줄(schedule_<room>.txt)
        List<String> scheduleLines = tc.loadScheduleFile(room);
        String[] days = {"월", "화", "수", "목", "금"};
        String[] times = {"09:00~09:50", "10:00~10:50", "11:00~11:50", "12:00~12:50",
            "13:00~13:50", "14:00~14:50", "15:00~15:50", "16:00~16:50"};
        Map<String, List<String>> roomSpec = new HashMap<>();
        for (String d : days) {
            roomSpec.put(d, new ArrayList<>(Collections.nCopies(times.length, "")));
        }
        for (String line : scheduleLines) {
            String[] p = line.split(",");
            if (p.length >= 4 && roomSpec.containsKey(p[0])) {
                int idx = Arrays.asList(times).indexOf(p[1]);
                if (idx >= 0) {
                    roomSpec.get(p[0]).set(idx, p[2] + "(" + p[3] + ")");
                }
            }
        }

        // 4) 예약 현황: 월·주·요일→실제 날짜 계산 → 서버 호출
        Map<String, List<String>> reservationsPerDay = new HashMap<>();

        // 4-1) 이번 달 1일 구하기
        LocalDate firstOfMonth = LocalDate.of(2025, month, 1);
        // 4-2) 그 달의 첫 번째 월요일 찾기
        LocalDate firstMonday = firstOfMonth.with(
                TemporalAdjusters.nextOrSame(DayOfWeek.MONDAY)
        );
        // 이번 달의 첫 번째 일요일
        LocalDate firstSunday = firstOfMonth.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));

        // 주간 시작/끝 날짜 계산
        LocalDate startDate, endDate;
        if (week == 1) {
            // 1주차: 1일부터 금요일(혹은 그보다 앞선 마지막 평일)까지
            startDate = firstOfMonth;  // "그 달 1일"을 그대로 쓰고
            // 1일이 금요일 이후(토·일)이면, 당월의 첫 금요일이 1일보다 앞서지 않으므로
            // nextOrSame(FRIDAY)로 얻은 날짜가 1일~5일 사이의 금요일이 됩니다.
            endDate = firstOfMonth.with(TemporalAdjusters.nextOrSame(DayOfWeek.FRIDAY));
        } else {
            // (기존 2주차 이상 로직 유지)
            startDate = firstMonday.plusWeeks(week - 2);
            endDate = startDate.plusDays(4);
        }

        String startDow = startDate.getDayOfWeek()
                .getDisplayName(TextStyle.SHORT, Locale.KOREAN);
        String endDow = endDate.getDayOfWeek()
                .getDisplayName(TextStyle.SHORT, Locale.KOREAN);

        // jTextField1에 표시
        jTextField1.setText(String.format(
                "%02d월 %02d일 (%s) ~ %02d월 %02d일 (%s)",
                startDate.getMonthValue(), startDate.getDayOfMonth(), startDow,
                endDate.getMonthValue(), endDate.getDayOfMonth(), endDow
        ));
        for (int di = 0; di < days.length; di++) {
            String dKor = days[di];
            LocalDate targetDate;

            if (week == 1) {
                // 1주차: 1일부터 가장 가까운 각 요일을 사용
                DayOfWeek colDow = DayOfWeek.of(di + 1); // di=0→MONDAY,1→TUESDAY...
                targetDate = firstOfMonth.with(
                        TemporalAdjusters.nextOrSame(colDow)
                );
                // 만약 첫 일요일을 넘어갔으면 빈 칸
                if (targetDate.isAfter(firstSunday)) {
                    reservationsPerDay.put(dKor, Collections.nCopies(times.length, ""));
                    continue;
                }
            } else {
                // 2주차 이상: 첫 월요일 기준으로 (week-2)주 + di 일만큼 더함
                targetDate = firstMonday
                        .plusWeeks(week - 2)
                        .plusDays(di);
            }

            // 다른 달로 넘어가는 셀은 빈 상태 리스트로 설정
            if (targetDate.getMonthValue() != month) {
                reservationsPerDay.put(
                        dKor,
                        Collections.nCopies(times.length, "")
                );
                continue;
            }

            String dateString = targetDate.toString();  // ISO 포맷 예: "2025-01-01"
            System.out.println(
                    "[Client] 요청 날짜=" + dateString + ", 강의실=" + room
            );
            List<RoomStatus> rsList = fetchScheduleFromServer(dateString, room);

            // times 순서대로 상태 문자열만 뽑아
            List<String> slotList = new ArrayList<>();
            for (String t : times) {
                RoomStatus rs = rsList.stream()
                        .filter(x -> x.getTimeSlot().equals(t)
                        && !x.getStatus().equals("거절"))
                        .findFirst()
                        .orElse(null);
                slotList.add(rs == null ? "" : rs.getStatus());
            }
            reservationsPerDay.put(dKor, slotList);
        }

        // 5) 완전 병합: 수업 > 예약 > 주차별
        Map<String, List<String>> merged = new HashMap<>();
        for (String d : days) {
            List<String> row = new ArrayList<>();
            List<String> r = roomSpec.get(d);
            List<String> v = reservationsPerDay.getOrDefault(d, Collections.nCopies(times.length, ""));
            List<String> w = weekly.getOrDefault(d, Collections.nCopies(times.length, ""));
            String display;
            for (int i = 0; i < times.length; i++) {
                if (!r.get(i).isEmpty()) {
                    display = r.get(i);
                } else if (!v.get(i).isEmpty()) {
                    display = v.get(i);
                } else if (!w.get(i).isEmpty()) {
                    display = w.get(i);
                } else {
                    display = "";
                }
                if ("비어 있음".equals(display)) {
                    display = "";
                }
                row.add(display);
            }
            merged.put(d, row);
        }

        // 6) 테이블에 뿌리기
        updateTimeTable(merged);
    }//GEN-LAST:event_searchBtnActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TimeTableFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TimeTableFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TimeTableFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TimeTableFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        User user = new User("id", "pw", "학생", "이름"); // 또는 로그인 결과로 받은 user
        new TimeTableFrame(user).setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox<String> lectureRoomComboBox;
    private javax.swing.JComboBox<String> monthComboBox;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTable timeTable;
    private javax.swing.JComboBox<String> weekComboBox;
    // End of variables declaration//GEN-END:variables
}
